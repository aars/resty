#
# resty - A tiny command line REST interface for bash and zsh.
#
# Fork me on github:
#   http://github.com/micha/resty
#
# Author:
#   Micha Niskin <micha@thinkminimo.com>
#   Copyright 2009, no rights reserved.
#
# Maintener:
#   Adriean Khisbe <adriean.khisbe@live.fr>
#

function usage() {
  echo "Usage:" 
  echo "  source resty [-W] [<remote>]   # load function into shell"
  echo "  resty <remote> [OPTIONS]     # set the remote"
}

export _RESTY_HOST="" # TODO: to upper case!
export _RESTY_PATH=""
export _RESTY_NO_HISTORY=""

# TODO: global var holers
export _RESTY_DATA_DIR _RESTY_CONF_DIR;

_RESTY_METHODS=(HEAD OPTIONS GET POST PUT TRACE PATCH DELETE)

function resty() {
  if [ -n "$XDG_CONFIG_HOME" ]; then
    # TODO: What is XDG? And why force XDG_DATA_HOME only here? 
    _RESTY_CONF_DIR="$XDG_CONFIG_HOME/resty"
    _RESTY_DATA_DIR="$XDG_DATA_HOME/resty"
  else
    _RESTY_CONF_DIR="$HOME/.resty"
    _RESTY_DATA_DIR="$_RESTY_CONF_DIR"
  fi
  
  # Make sure conf_dir exists
  mkdir -p "$_RESTY_CONF_DIR"
  local hostfile="$_RESTY_DATA_DIR/host"
  local remote=$(cat $hostfile 2>/dev/null) 

  # We can only continue with a host/remote
  if [[ -z "$remote" && -z "$1" ]]; then
    echo "No remote configured."
    echo
    usage
    return 1
  fi

  # Only print current URI base as default behaviour on calling resty,
  # or when requested with -v
  if [[ -z "$1" || "$1" = "-v" ]]; then 
    if [ "$remote" ]
      then echo $remote
      else echo "No remote configured."
    fi
    return 0
  fi

  # Set new rem
  local url=$1
  if [ -n "$url" ]; then
    case "$url" in
      http://*|https://*)
        _resty_opts=$(printf '%q ' "${curlopt[@]}")
        export _resty_opts

        echo "$url" |grep '\*' >/dev/null || url="${url}*"
        (echo "$url" | tee "${_RESTY_NO_HISTORY:-$host}") | cat 1>&2 && export _RESTY_HOST="$url"
      ;;
      *)
        echo "Unsupported protocol."
        echo "Supported: http, https"
        echo
        usage
      ;;
    esac
  fi
}

function resty-call() {
  if [ $# = 0 ] ; then echo "resty-call need args" >&2; return 1; fi

  local method="$1"; shift

  # this check only makes sense for broken internal usage or users calling
  # resty-call directly. Which they probably shouldn't. Keep it?
  if [[ ! "${_RESTY_METHODS[*]}" =~ "$method" ]]; then # this is not good (why?)
    echo "First argument must be an HTTP verb, '$method' isn't" >&2
    return 1
  fi
  
  # FIXME this should probably be more global than local.
  local hostfile="$_RESTY_DATA_DIR/host"

  if [ -z "$_RESTY_HOST" ]; then _RESTY_HOST=$(cat "$hostfile" 2>/dev/null); fi
  local domain=$(echo -n "$_RESTY_HOST" | perl -ane '/^https?:\/\/([^\/\*]+)/; print $1')
   
  # Do we have a cookie-jar for this domain?
  local cookiejar
  if [ -f "$_RESTY_DATA_DIR/cookies/$domain" ]; then
    cookiejar="$_RESTY_DATA_DIR/cookies/$domain"
  fi

  local editor=$(
    (exec 2>&-; which "$EDITOR" || which vim || echo "vi") | tail -n 1
  ); # editor default

  # FIXME I don't think these methods require a body. 
  if [[ "POST PUT TRACE DELETE" =~ "$method" ]]; then local hasbody="yes" ;fi


  # FIXME: What?! If cookies dir exist, create it and override our host config?!
  # commented out until we figure out what this _should_ do.
  #if [ -d "$cookies" ] ; then   # retrieve cookie
  #  (mkdir -p "$cookies"; echo "http://localhost*" > "$hostfile")
  #fi
  
  if [[ "$1" =~ ^/ ]]; then  # retrieve path
    local _path="$1"
    [[ $# > 0 ]] && shift
  fi
  if [[ ! "$1"  =~ ^- ]]; then  # retrieve data
    local body="$1"
    [[ $# > 0 ]] && shift
  fi

  local -a curlopt_cmd curlopt_file
  local raw query vimedit quote maybe_query verbose dry output_handler
  for opt in "$@"; do
    if [ -n "$maybe_query" -a -z "$query" ]; then query="?$opt"; continue; fi

    case $opt in
        # TODO; try adapt ; echo "$opt" | grep '^-[a-zA-Z]*v[a-zA-Z]*$' >/dev/null) \
        --verbose|-v)   verbose="yes";;
        -V)             vimedit="yes";;
        --dry-run)      dry="yes";;
        -Z)             raw="yes";;
        -W);; # Â§todo: check why nothing?
        -Q)             quote="yes";;
        -q)             maybe_query="yes";;

        # All other options go straight to curl
        *)              curlopt_cmd+=("$opt")
    esac
    ## idea: add --json, other option.
  done
  
  if [ -z "$quote" ]; then # replace special char with codes
    _path=$(echo "$_path" | sed 's/%/%25/g;s/\[/%5B/g;s/\]/%5D/g;s/|/%7C/g;s/\$/%24/g;s/&/%26/g;s/+/%2B/g;s/,/%2C/g;s/:/%3A/g;s/;/%3B/g;s/=/%3D/g;s/?/%3F/g;s/@/%40/g;s/ /%20/g;s/#/%23/g;s/{/%7B/g;s/}/%7D/g;s/\\/%5C/g;s/\^/%5E/g;s/~/%7E/g;s/`/%60/g')
  fi
  
  
  if [[ "HEAD OPTIONS" =~ "$method" ]]; then raw="yes"; fi

  if [[ -z "$method" || "$method" = "-v" ]]; then # ??
    echo "$_RESTY_HOST ${_resty_opts[*]}"
    return
  fi
  if [ -n "$_path" ]; then # update current path
    _RESTY_PATH=$_path
  fi

  local url="${_RESTY_HOST//\*/$_RESTY_PATH}"
  
  eval "curlopt_file=(${_resty_opts[*]})"  # TODO: rename or change
  
  if [ "$hasbody" = "yes" ] && [ -z "$body" ]; then # treat the empty? body
    if [ -t 0 ]; then # retrieve what stdin hold
       local body="@-"
    else
       local body=""
    fi
  fi

  if [ "$hasbody" = "yes" ] && [ "$vimedit" = "yes" ]; then
    local tmpf=$(mktemp /tmp/resty.XXXXXX)
    [ -t 0 ] || cat > $tmpf
    (exec < /dev/tty; "$editor" $tmpf)
    local body="$(cat $tmpf)"
    rm -f $tmpf
  fi

  if [ -n "$body" ] && [ "$body" != "@-" ]; then [[ $# > 0 ]] && shift; fi
  if [ -n "$body" ]; then curl_opt="--data-binary \"$body\""; fi

  if [ "$1" = "-Z" ]; then raw="yes"; [[ $# > 0 ]] && shift; fi

  if [ "$method" = "HEAD" ]; then
    curl_opt="-I"
    raw="yes"
  fi
  
 
  # Retrieve domain configurations 
  # with support method and path specific configuration
  local domain_config="$_RESTY_CONF_DIR/$domain"
  if [ -f "$domain_config" ]; then
    function config-lookup() {
      local config
      if [[ "$2" =~ ^/.+ ]]; then # Look for uri
        config=$(grep -m 1 "^$1 $2" $domain_config | awk '{$1=""; $2=""; sub("  ", ""); print}')
      else
        config=$(grep -m 1 "^$1 [^/]" $domain_config | awk '{$1=""; sub("  ", ""); print}')
      fi
      
      if [ -z "$config" ]; then return 1; fi

      echo $config
    }

    args2=$(config-lookup $method $_path || config-lookup $method)
  fi

  # Setup curl command. Basics.
  cmd="curl -sLv $curl_opt"
  cmd+=" -X $method $args2 ${curlopt_file[@]} ${curlopt_cmd[@]}"
   
  # Optional stuff
  if [ -n "$cookiejar" ]; then
    cmd+=" -c $cookiejar"
  fi
  
  # Finally add url
  cmd+=" $url$query"
  
  # Only show command on dry run
  if [ -n "$dry" ]; then
    echo $cmd
    return
  fi

  # Identify output types
  cmd="($cmd | sed 's/^/OUT /' && echo) 3>&2 2>&1 1>&3"
  cmd="(($cmd) | sed 's/^/ERR /' && echo) 2>&1"
  res=$(eval $cmd)
  
  out=$(sed '/^OUT /s/^....//p; d' <<< "$res" )
  err=$(sed '/^ERR /s/^....//p; d' <<< "$res" )

  http_status=$(sed '/^.*HTTP\/1\.[01] [0-9][0-9][0-9]/s/.*\([0-9][0-9][0-9]\).*/\1/p; d' <<< "$err" | tail -n1)
  # FIXME Maybe a bit to strict matching on content-type value
  content_type=$(sed '/^.*Content-Type: .*/s/.*: \([A-Za-z0-9\/]*\).*/\1/p; d' <<< "$err" | xargs | tail -n 1)
   
  if [ -n "$err" -a -n "$verbose" ]; then echo "$err" 1>&2 ; fi
  
  # Normal output always goes to stdout
 
  # Use output handler for this content_type?
  # FIXME For some reason the output_handler var ends up in our environment/shell. Weird
  if [[ -z "$raw" && -n "$content_type" && -n "${RESTY_OUTPUT_HANDLER[@]}" ]]; then
    output_handler=${RESTY_OUTPUT_HANDLER[$content_type]}
  fi
  
  # Don't use output handler for raw output
  if [[ -z "$raw" && -n "$output_handler" ]]; then
    echo "output handled by '$output_handler'" >&2
    echo "$out" | $output_handler
  else
    echo "$out"
  fi

  # Output other info to stderr
  echo "HTTP status: $http_status" 1>&2
}

resty-load-functions() {
  for i in ${_RESTY_METHODS[@]}
  do
    eval "$i() { resty-call $i \"\$@\"; }"
  done
}
resty-load-functions

# With -W option, does not write to history file
[ "$1" = "-W" ] && export _RESTY_NO_HISTORY="/dev/null" && [[ $# > 0 ]] && shift

resty "$@" >/dev/null 2>&1
